{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.inform6",
  "name": "Inform 6",
  "patterns": [
    {
      "include": "#optionComment"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#string"
    },
    {
      "include": "#routine"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#directive"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#object"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#class"
    }
  ],
  "repository": {
    "optionComment": {
      "name": "keyword.other.directive.inform6",
      "match": "!%.*$"
    },
    "comment": {
      "name": "comment.line.inform6",
      "match": "!.*$"
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.double.inform6",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "string.double.quote.inform6.begin"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "string.double.quote.inform6.end"
            }
          },
          "patterns": [
            {
              "include": "#printingVariable"
            },
            {
              "include": "#escapeSequence"
            }
          ]
        },
        {
          "name": "string.quoted.single.inform6",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "string.single.quote.inform6.begin"
            }
          },
          "comment": "Inform 6 allows strings like 'pears//p'",
          "end": "(//(?:p)?)?(')",
          "endCaptures": {
            "1": {
              "name": "constant.character.escape.inform6"
            },
            "2": {
              "name": "string.single.quote.inform6.end"
            }
          },
          "patterns": [
            {
              "include": "#escapeSequence"
            }
          ]
        }
      ]
    },
    "printingVariable": {
      "comment": "Inform has 32 printing variables @00 to @31.",
      "name": "variable.other.inform6",
      "match": "@(0[0-9]|1[0-9]|2[0-9]|3[0-1])"
    },
    "escapeSequence": {
      "patterns": [
        {
          "comment": "A double @ sign followed by a decimal number means the character with the given ZSCII value. Accented characters will use a single @ character.",
          "name": "constant.character.escape.inform6",
          "match": "\\^|~|\\\\|@(@\\d{1,3}|[\\^`:][aeiouAEIOU]|:y|'[aeiouyAEIOUY]|c[cC]|~[anoANO]|/[oO]|o[aA]|ss|oe|ae|OE|AE|th|Th|et|Et|LL|!!|\\?\\?|<<|>>)"
        },
        {
          "comment": "You can place any Unicode character into text by quoting its Unicode value in hexadecimal.",
          "name": "constant.character.escape.inform6",
          "match": "@\\{[0-9a-fA-F]{1,6}\\}"
        },
        {
          "comment": "Can't use an escape character with nothing after it. If someone wants a literal @ character, they would have to use @@64.",
          "name": "invalid.illegal.inform6",
          "match": "@"
        },
        {
          "comment": "Six hexademical characters is the limit so as to represent the vast majority of commonly used Unicode characters and symbols.",
          "name": "invalid.illegal.inform6",
          "match": "@\\{[0-9a-fA-F]{7,}\\}"
        }
      ]
    },
    "routine": {
      "name": "meta.routine.inform6",
      "begin": "^\\s*\\[",
      "end": "\\]",
      "captures": {
        "0": {
          "name": "keyword.other.directive.inform6"
        }
      },
      "patterns": [
        {
          "include": "#routineHeader"
        },
        {
          "include": "#routineBody"
        }
      ]
    },
    "routineHeader": {
      "begin": "([a-zA-Z_]\\w*)\\b",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.inform6"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "variable.parameter.inform6",
          "match": "\\b[a-zA-Z_]\\w*\\b"
        }
      ]
    },
    "routineBody": {
      "begin": "(?=;)",
      "end": "(?=\\])",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#directive"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#class"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.control.inform6",
          "match": "\\b(break|continue|default|do|else|for|if|jump|new_line|print|print_ret|return|rfalse|rtrue|spaces|string|switch|until|while)\\b"
        },
        {
          "name": "keyword.control.zmachine.inform6",
          "match": "\\b(box|font\\s+(on|off)|give|inversion|objectloop|quit|read|remove|restore|save|style\\s+(roman|bold|underline|reverse|fixed))\\b"
        },
        {
          "match": "\\b(move)\\s+([a-zA-Z_]\\w*)\\s+(to)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.inform6"
            },
            "2": {
              "patterns": [
                {
                  "include": "#variable"
                }
              ]
            },
            "3": {
              "name": "keyword.control.inform6"
            }
          }
        }
      ]
    },
    "directive": {
      "patterns": [
        {
          "comment": "Directives are case insensitive and can be written with a # sign.",
          "name": "keyword.other.directive.inform6",
          "match": "(?i)(\\b|#)(Abbreviate|Attribute|Class|Constant|Default|End|Endif|Extend|Global|Ifdef|Iffalse|Ifndef|Ifnot|Iftrue|Iffalse|Include|Message(\\s+(error|fatalerror|warning))?|Object|Origsource|Property(\\s+additive)?|Release|Replace|Serial|Statusline\\s+(time|score)|System_file|Undef|Verb(\\s+meta)?|Zcharacter(\\s+table)?)\\b"
        },
        {
          "comment": "Some directives are obsolete or exist for compiler maintenance only.",
          "name": "invalid.deprecated.inform6",
          "match": "(?i)(\\b|#)(Dictionary|Fake_action|Ifv3|Ifv5|Import|Link|Lowstring|Nearby|Stub|Switches|Trace|Version)\\b"
        },
        {
          "comment": "Here first, last and only go with the Extend directive; alias goes with Property or Attribute.",
          "name": "keyword.other.inform6",
          "match": "\\b(alias|first|last|only)\\b"
        },
        {
          "match": "(?i)\\b(Array)\\s+[a-zA-Z_]\\w*\\s+(static\\s+)?(-->|->|buffer\\b|string\\b|table\\b)",
          "captures": {
            "1": {
              "name": "keyword.other.directive.inform6"
            },
            "2": {
              "name": "keyword.other.directive.inform6"
            },
            "3": {
              "name": "keyword.other.directive.inform6"
            }
          }
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "name": "constant.numeric.integer.binary.inform6",
          "match": "\\$\\$[01]+\\b"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.inform6",
          "match": "\\$[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.integer.inform6",
          "match": "(\\b|-)\\d+\\b"
        },
        {
          "name": "constant.numeric.float.inform6",
          "match": "\\$[\\+-]\\d+(\\.\\d+)?(e[\\+-]\\d+)?\\b"
        },
        {
          "comment": "The NULL does show up in the library but it's not documented anywhere officially that I can see.",
          "name": "constant.language.inform6",
          "match": "\\b(false|nothing|NULL|true)\\b"
        },
        {
          "name": "constant.numeric.integer.character.inform6",
          "match": "'(@(\\{[0-9a-fA-F]{1,6}\\}|[\\^`:][aeiouAEIOU]|:y|'[aeiouyAEIOUY]|c[cC]|~[anoANO]|/[oO]|o[aA]|ss|oe|OE|ae|AE|th|Th|et|Et|LL|!!|\\?\\?|<<|>>)|[^@])'"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.inform6",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.comparison.inform6",
          "match": "==|~=|<=|<|>=|>"
        },
        {
          "name": "keyword.operator.assignment.inform6",
          "match": "="
        },
        {
          "name": "keyword.operator.increment.inform6",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.decrement.inform6",
          "match": "--"
        },
        {
          "comment": "Everything except private and class are condition operators. Here class, private and with are segments of an object definition. It's technically the case that has serves as both.",
          "name": "keyword.operator.expression.inform6",
          "match": "\\b(class|has|hasnt|in|notin|ofclass|or|private|provides|with)\\b"
        },
        {
          "name": "keyword.operator.logical.inform6",
          "match": "&&|\\|\\||~~"
        },
        {
          "name": "keyword.operator.bitwise.inform6",
          "match": "&|\\||~"
        },
        {
          "name": "keyword.operator.array.inform6",
          "match": "-->|->"
        },
        {
          "name": "keyword.operator.accessor.inform6",
          "match": "\\.&|\\.#|\\.|::"
        },
        {
          "name": "keyword.operator.separator.inform6",
          "match": ","
        }
      ]
    },
    "object": {
      "patterns": [
        {
          "comment": "Inform objects can use arrows to indicate relative placement.",
          "match": "^([a-zA-Z_]\\w*)\\s*((?:->)(?:\\s*->)*)\\s*([a-zA-Z_]\\w*)?\\s*(\"[^\"]*?\")?\\s*([a-zA-Z_]\\w*)?",
          "captures": {
            "1": {
              "name": "entity.name.type.inform6"
            },
            "2": {
              "name": "storage.modifier.inform6"
            },
            "3": {
              "name": "variable.other.inform6"
            },
            "4": {
              "name": "string.quoted.double.inform6",
              "patterns": [
                {
                  "include": "#printingVariable"
                },
                {
                  "include": "#escapeSequence"
                }
              ]
            },
            "5": {
              "name": "invalid.illegal.inform6"
            }
          }
        },
        {
          "comment": "Inform objects can use absolute placement with no arrows.",
          "match": "^([a-zA-Z_]\\w*)\\s*([a-zA-Z_]\\w*)?\\s*(\"[^\"]*?\")?\\s*([a-zA-Z_]\\w*)?",
          "captures": {
            "1": {
              "name": "entity.name.type.inform6"
            },
            "2": {
              "name": "variable.other.inform6"
            },
            "3": {
              "name": "string.quoted.double.inform6",
              "patterns": [
                {
                  "include": "#printingVariable"
                },
                {
                  "include": "#escapeSequence"
                }
              ]
            },
            "4": {
              "name": "storage.modifier.inform6"
            }
          }
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "name": "variable.language.library.inform6",
          "match": "\\b(action|action_to_be|actor|c_style|consult_from|consult_words|deadflag|et_flag|etype|herobj|himobj|inp1|inp2|inventory_stage|itobj|keep_silent|listing_together|lm_n|lm_o|location|lookmode|nodify_mode|noun|parsed_number|parser_action|parser_one|parser_two|real_location|receive_action|scope_reason|scope_stage|score|second|special_number|standard_interpreter|the_time|vague_obj|vague_word|verb_word|verb_wordnum|wn)\\b"
        },
        {
          "comment": "The possible values held by the action variable can be referred to using ## notation.",
          "name": "variable.other.actiontype.inform6",
          "match": "##[a-zA-Z]+\\b"
        },
        {
          "name": "variable.language.grammartoken.inform6",
          "match": "\\b(creature|held|multi|multiexcept|multiheld|multiinside|number|topic)\\b"
        },
        {
          "name": "variable.language.glulx.inform6",
          "match": "\\b(gg_event|gg_mainwin|gg_statuswin)\\b"
        }
      ]
    },
    "class": {
      "patterns": [
        {
          "name": "support.class.library.inform6",
          "match": "\\b(CompassDirection|Menu|Option|SwitchOption)\\b"
        },
        {
          "name": "support.class.meta.inform6",
          "match": "\\b(Routine|String)\\b"
        }
      ]
    }
  }
}
